webpackHotUpdate_N_E("pages/index",{

/***/ "./pages/index.js":
/*!************************!*\
  !*** ./pages/index.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Home; });\n/* harmony import */ var _Users_aleksioconnor_Documents_projects_reaktor_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/head */ \"./node_modules/next/dist/next-server/lib/head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var swr__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! swr */ \"./node_modules/swr/esm/index.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_5__);\n\n\nvar _jsxFileName = \"/Users/aleksioconnor/Documents/projects/reaktor/pages/index.js\",\n    _s = $RefreshSig$();\n\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(_Users_aleksioconnor_Documents_projects_reaktor_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\nfunction Home() {\n  _s();\n\n  var _this2 = this;\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])('A'),\n      letter = _useState[0],\n      setLetter = _useState[1];\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(null),\n      jackets = _useState2[0],\n      setJackets = _useState2[1];\n\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(null),\n      shirts = _useState3[0],\n      setShirts = _useState3[1];\n\n  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(null),\n      accessories = _useState4[0],\n      setAccessories = _useState4[1];\n\n  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])('jackets'),\n      category = _useState5[0],\n      setCategory = _useState5[1];\n\n  var _useState6 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(null),\n      activeId = _useState6[0],\n      setActiveId = _useState6[1];\n\n  var _useState7 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])([]),\n      pending = _useState7[0],\n      setPending = _useState7[1];\n\n  var _useState8 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])({}),\n      manufacturers = _useState8[0],\n      setManufacturers = _useState8[1];\n\n  var fetcher = function fetcher() {\n    return fetch.apply(void 0, arguments).then(function (res) {\n      return res.json();\n    });\n  };\n\n  Object(swr__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(!jackets ? 'https://bad-api-assignment.reaktor.com/products/jackets' : null, fetcher, {\n    onSuccess: function onSuccess(data, key, config) {\n      console.log(\"request\");\n      dataParser(data, setJackets);\n    }\n  });\n  Object(swr__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(!shirts ? 'https://bad-api-assignment.reaktor.com/products/shirts' : null, fetcher, {\n    onSuccess: function onSuccess(data, key, config) {\n      dataParser(data, setShirts);\n    }\n  });\n  Object(swr__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(!accessories ? 'https://bad-api-assignment.reaktor.com/products/accessories' : null, fetcher, {\n    onSuccess: function onSuccess(data, key, config) {\n      var uniqueManufacturers = lodash__WEBPACK_IMPORTED_MODULE_5___default.a.uniq(lodash__WEBPACK_IMPORTED_MODULE_5___default.a.map(data, 'manufacturer'));\n\n      setPending([\"abiplos\", \"xoon\", \"neue\", \"derp\", \"reps\"]);\n      dataParser(data, setAccessories);\n    }\n  }); // Hacky way of using useSWR; however, it works! It uses an array as a stack that \n\n  Object(swr__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(pending.length > 0 ? \"https://bad-api-assignment.reaktor.com/availability/\".concat(pending[0]) : null, fetcher, {\n    onSuccess: function onSuccess(data, key, config) {\n      console.log('new fetch for ' + pending[0]);\n\n      var newObj = _objectSpread({}, manufacturers);\n\n      newObj[name] = dataMap(data.response);\n      setManufacturers(newObj);\n      setPending(pending.slice(1));\n    },\n    refreshInterval: 1\n  }); // maps data into key value pairs\n\n  var dataMap = function dataMap(data) {\n    var newObj = {};\n\n    lodash__WEBPACK_IMPORTED_MODULE_5___default.a.forEach(data, function (val) {\n      newObj[val.id] = val.DATAPAYLOAD;\n    });\n\n    return newObj;\n  }; // sorts the jackets into an array of subarrays sorted alphabetically\n\n\n  var dataParser = function dataParser(data, setter) {\n    var sortedData = lodash__WEBPACK_IMPORTED_MODULE_5___default.a.orderBy(data, ['name'], ['asc']);\n\n    var alphabeticalSort = sortedData.reduce(function (r, e) {\n      var group = e.name[0];\n      if (!r[group]) r[group] = {\n        group: group,\n        children: [e]\n      };else r[group].children.push(e);\n      return r;\n    }, {});\n    setter(alphabeticalSort);\n  };\n\n  var createAlphabet = function createAlphabet() {\n    return Array.apply(undefined, Array(26)).map(function (x, y) {\n      return String.fromCharCode(y + 65);\n    });\n  };\n\n  function Alphabet() {\n    var _this = this;\n\n    var alphabet = createAlphabet();\n\n    var handeClick = function handeClick(val) {\n      setLetter(val);\n    };\n\n    var alphabetFilter = lodash__WEBPACK_IMPORTED_MODULE_5___default.a.map(alphabet, function (_char) {\n      return __jsx(\"li\", {\n        key: _char,\n        onClick: function onClick() {\n          return handeClick(_char);\n        },\n        className: \"jsx-1980286401\" + \" \" + 'alpha',\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }\n      }, \" \", _char, __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a, {\n        id: \"1980286401\",\n        __self: _this\n      }, \".alpha.jsx-1980286401{display:inline;cursor:pointer;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/Users/aleksioconnor/Documents/projects/reaktor/pages/index.js */\"));\n    });\n\n    return alphabetFilter;\n  }\n\n  var FilterCategory = function FilterCategory(props) {\n    var handeClick = function handeClick(val) {\n      setCategory(val);\n    };\n\n    return __jsx(\"div\", {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, __jsx(\"button\", {\n      onClick: function onClick() {\n        return handeClick('jackets');\n      },\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, \"jackets\"), __jsx(\"button\", {\n      onClick: function onClick() {\n        return handeClick('shirts');\n      },\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, \"shirts\"), __jsx(\"button\", {\n      onClick: function onClick() {\n        return handeClick('accessories');\n      },\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, \"accessories\"));\n  };\n\n  var retrieveAvailabilityInformation = function retrieveAvailabilityInformation(val) {\n    if (!manufacturers[val.manufacturer]) return null;\n    console.log(manufacturers[val.manufacturer]);\n    console.log(manufacturers[val.manufacturer][val.id.toUpperCase()]);\n  }; // TOMORROW: MAP THE MANUFACTURER OBJECT GUZAMAZUNGA SO THAT IN THE RENDER METHOD OF LISTOFPRODUCT\n  // THE AVAILABILITY CAN BE SIMPLY ACCESSED THROUGH THE KEY VALUE PAIRING, E.G.\n  // OBJ[ID]\n\n\n  var listOfProducts = function listOfProducts(data) {\n    var list = lodash__WEBPACK_IMPORTED_MODULE_5___default.a.map(data[letter].children, function (val) {\n      var handleClick = function handleClick(val) {\n        activeId == val.id ? setActiveId(null) : setActiveId(val.id);\n      };\n\n      return __jsx(\"li\", {\n        key: val.id,\n        onClick: function onClick() {\n          return handleClick(val);\n        },\n        className: \"jsx-2353767445\" + \" \" + ((activeId == val.id ? 'list-element-active' : 'list-element') || \"\"),\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }\n      }, val.name, __jsx(\"div\", {\n        className: \"jsx-2353767445\" + \" \" + ((activeId == val.id ? 'info-active' : 'info') || \"\"),\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 9\n        }\n      }, __jsx(\"ul\", {\n        className: \"jsx-2353767445\",\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }\n      }, __jsx(\"li\", {\n        key: val.id + 1,\n        className: \"jsx-2353767445\",\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }\n      }, \" id: \", val.id), __jsx(\"li\", {\n        key: val.id + 2,\n        className: \"jsx-2353767445\",\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }\n      }, \" type: \", val.type), __jsx(\"li\", {\n        key: val.id + 3,\n        className: \"jsx-2353767445\",\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }\n      }, \"price: \", val.price), __jsx(\"li\", {\n        key: val.id + 4,\n        className: \"jsx-2353767445\",\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }\n      }, \"manufacturer: \", val.manufacturer), __jsx(\"li\", {\n        key: val.id + 5,\n        className: \"jsx-2353767445\",\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }\n      }, \"availability: \", !manufacturers[val.manufacturer] ? 'loading' : manufacturers[val.manufacturer][val.id.toUpperCase()] + ' d'), __jsx(\"li\", {\n        key: val.id + 6,\n        className: \"jsx-2353767445\",\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }\n      }, \"colors: \", lodash__WEBPACK_IMPORTED_MODULE_5___default.a.map(val.color, function (color) {\n        return __jsx(\"span\", {\n          key: val.id + color,\n          className: \"jsx-2353767445\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 67\n          }\n        }, color, \" \");\n      }), \" \"))), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a, {\n        id: \"2353767445\",\n        __self: _this2\n      }, \".list-element.jsx-2353767445{cursor:pointer;}.list-element-active.jsx-2353767445{cursor:pointer;color:red;}.info.jsx-2353767445{display:none;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/Users/aleksioconnor/Documents/projects/reaktor/pages/index.js */\"));\n    });\n\n    return __jsx(\"ul\", {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }\n    }, list);\n  };\n\n  var Rendered = function Rendered() {\n    var x = null;\n    if (category == 'jackets') x = jackets;\n    if (category == 'shirts') x = shirts;\n    if (category == 'accessories') x = accessories;\n    if (!x) return __jsx(\"div\", {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 20\n      }\n    }, \"loading\");\n    return __jsx(\"div\", {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 12\n      }\n    }, listOfProducts(x));\n  };\n\n  return __jsx(\"div\", {\n    className: \"jsx-3174588099\" + \" \" + \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }\n  }, __jsx(next_head__WEBPACK_IMPORTED_MODULE_3___default.a, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    className: \"jsx-3174588099\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }, \"Create Next App\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    className: \"jsx-3174588099\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  })), __jsx(\"main\", {\n    className: \"jsx-3174588099\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"jsx-3174588099\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }, \"current letter: \", letter, __jsx(\"ul\", {\n    className: \"jsx-3174588099\" + \" \" + 'alphabet',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, __jsx(Alphabet, {\n    className: \"jsx-3174588099\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  })), __jsx(FilterCategory, {\n    className: \"jsx-3174588099\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  })), __jsx(Rendered, {\n    className: \"jsx-3174588099\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  })), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a, {\n    id: \"2515049729\",\n    __self: this\n  }, \".container.jsx-3174588099{min-height:100vh;padding:0 0.5rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}main.jsx-3174588099{padding:5rem 0;-webkit-flex:1;-ms-flex:1;flex:1;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}footer.jsx-3174588099{width:100%;height:100px;border-top:1px solid #eaeaea;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}footer.jsx-3174588099 img.jsx-3174588099{margin-left:0.5rem;}footer.jsx-3174588099 a.jsx-3174588099{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}a.jsx-3174588099{color:inherit;-webkit-text-decoration:none;text-decoration:none;}.title.jsx-3174588099 a.jsx-3174588099{color:#0070f3;-webkit-text-decoration:none;text-decoration:none;}.title.jsx-3174588099 a.jsx-3174588099:hover,.title.jsx-3174588099 a.jsx-3174588099:focus,.title.jsx-3174588099 a.jsx-3174588099:active{-webkit-text-decoration:underline;text-decoration:underline;}.title.jsx-3174588099{margin:0;line-height:1.15;font-size:4rem;}.title.jsx-3174588099,.description.jsx-3174588099{text-align:center;}.description.jsx-3174588099{line-height:1.5;font-size:1.5rem;}code.jsx-3174588099{background:#fafafa;border-radius:5px;padding:0.75rem;font-size:1.1rem;font-family:Menlo,Monaco,Lucida Console,Liberation Mono, DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New,monospace;}.grid.jsx-3174588099{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;max-width:800px;margin-top:3rem;}.card.jsx-3174588099{margin:1rem;-webkit-flex-basis:45%;-ms-flex-preferred-size:45%;flex-basis:45%;padding:1.5rem;text-align:left;color:inherit;-webkit-text-decoration:none;text-decoration:none;border:1px solid #eaeaea;border-radius:10px;-webkit-transition:color 0.15s ease,border-color 0.15s ease;transition:color 0.15s ease,border-color 0.15s ease;}.card.jsx-3174588099:hover,.card.jsx-3174588099:focus,.card.jsx-3174588099:active{color:#0070f3;border-color:#0070f3;}.card.jsx-3174588099 h3.jsx-3174588099{margin:0 0 1rem 0;font-size:1.5rem;}.card.jsx-3174588099 p.jsx-3174588099{margin:0;font-size:1.25rem;line-height:1.5;}.logo.jsx-3174588099{height:1em;}@media (max-width:600px){.grid.jsx-3174588099{width:100%;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbGVrc2lvY29ubm9yL0RvY3VtZW50cy9wcm9qZWN0cy9yZWFrdG9yL3BhZ2VzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtNa0IsQUFHNEIsQUFTRixBQVdKLEFBU1EsQUFJTixBQU1DLEFBS0EsQUFPWSxBQUlqQixBQU9TLEFBSUYsQUFLRyxBQVNOLEFBVUQsQUFjRSxBQUtJLEFBS1QsQUFNRSxBQUtFLFNBckVJLEFBMkRDLEVBOUZMLEFBb0dmLEFBSzBCLENBbkNULEVBbkRNLEFBS0EsQUE0REEsQ0EvRmQsQ0F5RFUsQ0FsRUEsQ0E4RG5CLEFBK0NtQixDQWhGbkIsQUEwQ29CLEtBbERXLEVBbUNkLENBMkRDLE1BaERsQixDQWxFZSxDQXdHZixBQUtBLEVBdENrQixJQWZsQixFQTJEQSxLQTFHZSxLQVlBLEFBbURJLE9BdEJuQixJQVhBLEFBS0EsTUE4QnNFLElBMUM3QyxBQStDSixJQVdKLFdBbUNmLElBbENnQixlQTFGTSxDQTJGUixhQWxGUSxDQW1GRCxJQXZFRSx3Q0EwREEsTUEvQ0osQUE2RE0sYUE1RkYsS0F5RXpCLE9Bb0JxQixFQXBGSSxpQkFxRjhCLFNBekVsQyx3Q0FXckIsQUErQ2lCLG1CQTlFSSxjQVNBLG9CQVlyQixJQTJEa0IsTUFjbEIsVUFia0IsZ0JBQ2xCLHVCQWpGQSxjQVNBIiwiZmlsZSI6Ii9Vc2Vycy9hbGVrc2lvY29ubm9yL0RvY3VtZW50cy9wcm9qZWN0cy9yZWFrdG9yL3BhZ2VzL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJ1xuaW1wb3J0IHVzZVNXUiBmcm9tICdzd3InXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSG9tZSgpIHtcbiAgY29uc3QgWyBsZXR0ZXIsIHNldExldHRlciBdID0gdXNlU3RhdGUoJ0EnKVxuICBjb25zdCBbIGphY2tldHMsIHNldEphY2tldHMgXSA9IHVzZVN0YXRlKG51bGwpXG4gIGNvbnN0IFsgc2hpcnRzLCBzZXRTaGlydHMgXSA9IHVzZVN0YXRlKG51bGwpXG4gIGNvbnN0IFsgYWNjZXNzb3JpZXMsIHNldEFjY2Vzc29yaWVzIF0gPSB1c2VTdGF0ZShudWxsKVxuICBjb25zdCBbIGNhdGVnb3J5LCBzZXRDYXRlZ29yeSBdID0gdXNlU3RhdGUoJ2phY2tldHMnKVxuICBjb25zdCBbIGFjdGl2ZUlkLCBzZXRBY3RpdmVJZCBdID0gdXNlU3RhdGUobnVsbClcbiAgY29uc3QgWyBwZW5kaW5nLCBzZXRQZW5kaW5nIF0gPSB1c2VTdGF0ZShbXSlcbiAgY29uc3QgWyBtYW51ZmFjdHVyZXJzLCBzZXRNYW51ZmFjdHVyZXJzIF0gPSB1c2VTdGF0ZSh7fSlcblxuXG4gIGNvbnN0IGZldGNoZXIgPSAoLi4uYXJncykgPT4gZmV0Y2goLi4uYXJncykudGhlbigocmVzKSA9PiB7XG4gICAgcmV0dXJuIHJlcy5qc29uKClcbiAgfSlcblxuICB1c2VTV1IoIWphY2tldHMgPyAnaHR0cHM6Ly9iYWQtYXBpLWFzc2lnbm1lbnQucmVha3Rvci5jb20vcHJvZHVjdHMvamFja2V0cycgOiBudWxsLCBmZXRjaGVyLCB7IG9uU3VjY2VzczogKGRhdGEsIGtleSwgY29uZmlnKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJyZXF1ZXN0XCIpXG4gICAgZGF0YVBhcnNlcihkYXRhLCBzZXRKYWNrZXRzKVxuICB9fSlcblxuICB1c2VTV1IoIXNoaXJ0cyA/ICdodHRwczovL2JhZC1hcGktYXNzaWdubWVudC5yZWFrdG9yLmNvbS9wcm9kdWN0cy9zaGlydHMnIDogbnVsbCwgZmV0Y2hlciwgeyBvblN1Y2Nlc3M6IChkYXRhLCBrZXksIGNvbmZpZykgPT4ge1xuICAgIGRhdGFQYXJzZXIoZGF0YSwgc2V0U2hpcnRzKVxuICB9fSlcblxuICB1c2VTV1IoIWFjY2Vzc29yaWVzID8gJ2h0dHBzOi8vYmFkLWFwaS1hc3NpZ25tZW50LnJlYWt0b3IuY29tL3Byb2R1Y3RzL2FjY2Vzc29yaWVzJyA6IG51bGwsIGZldGNoZXIsIHsgb25TdWNjZXNzOiAoZGF0YSwga2V5LCBjb25maWcpID0+IHtcbiAgICBjb25zdCB1bmlxdWVNYW51ZmFjdHVyZXJzID0gXy51bmlxKF8ubWFwKGRhdGEsICdtYW51ZmFjdHVyZXInKSlcbiAgICBzZXRQZW5kaW5nKFtcImFiaXBsb3NcIiwgXCJ4b29uXCIsIFwibmV1ZVwiLCBcImRlcnBcIiwgXCJyZXBzXCJdKVxuICAgIGRhdGFQYXJzZXIoZGF0YSwgc2V0QWNjZXNzb3JpZXMpXG4gIH19KVxuXG4gIC8vIEhhY2t5IHdheSBvZiB1c2luZyB1c2VTV1I7IGhvd2V2ZXIsIGl0IHdvcmtzISBJdCB1c2VzIGFuIGFycmF5IGFzIGEgc3RhY2sgdGhhdCBcbiAgdXNlU1dSKHBlbmRpbmcubGVuZ3RoID4gMCA/IGBodHRwczovL2JhZC1hcGktYXNzaWdubWVudC5yZWFrdG9yLmNvbS9hdmFpbGFiaWxpdHkvJHtwZW5kaW5nWzBdfWAgOiBudWxsLCBmZXRjaGVyLCB7IG9uU3VjY2VzczogKGRhdGEsIGtleSwgY29uZmlnKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ25ldyBmZXRjaCBmb3IgJyArIHBlbmRpbmdbMF0pXG4gICAgY29uc3QgbmV3T2JqID0gey4uLm1hbnVmYWN0dXJlcnN9XG4gICAgbmV3T2JqW25hbWVdID0gZGF0YU1hcChkYXRhLnJlc3BvbnNlKVxuICAgIHNldE1hbnVmYWN0dXJlcnMobmV3T2JqKVxuICAgIHNldFBlbmRpbmcocGVuZGluZy5zbGljZSgxKSlcbiAgfSwgcmVmcmVzaEludGVydmFsIDogMX0pXG5cbiAgLy8gbWFwcyBkYXRhIGludG8ga2V5IHZhbHVlIHBhaXJzXG4gIGNvbnN0IGRhdGFNYXAgPSAoZGF0YSkgPT4ge1xuICAgIGNvbnN0IG5ld09iaiA9IHt9XG4gICAgXy5mb3JFYWNoKGRhdGEsICh2YWwpID0+IHtcbiAgICAgIG5ld09ialt2YWwuaWRdID0gdmFsLkRBVEFQQVlMT0FEXG4gICAgfSlcbiAgICByZXR1cm4gbmV3T2JqXG4gIH1cblxuICBcbiAgLy8gc29ydHMgdGhlIGphY2tldHMgaW50byBhbiBhcnJheSBvZiBzdWJhcnJheXMgc29ydGVkIGFscGhhYmV0aWNhbGx5XG4gIGNvbnN0IGRhdGFQYXJzZXIgPSAoZGF0YSwgc2V0dGVyKSA9PiB7XG4gICAgY29uc3Qgc29ydGVkRGF0YSA9IF8ub3JkZXJCeShkYXRhLCBbJ25hbWUnXSwgWydhc2MnXSlcbiAgICBjb25zdCBhbHBoYWJldGljYWxTb3J0ID0gc29ydGVkRGF0YS5yZWR1Y2UoKHIsIGUgKSA9PiB7XG4gICAgICBsZXQgZ3JvdXAgPSBlLm5hbWVbMF1cbiAgICAgIGlmKCFyW2dyb3VwXSkgcltncm91cF0gPSB7Z3JvdXAsIGNoaWxkcmVuOiBbZV19XG4gICAgICBlbHNlIHJbZ3JvdXBdLmNoaWxkcmVuLnB1c2goZSk7XG4gICAgICByZXR1cm4gcjtcbiAgICB9LCB7fSlcbiAgICBzZXR0ZXIoYWxwaGFiZXRpY2FsU29ydClcbiAgfVxuICBcbiAgY29uc3QgY3JlYXRlQWxwaGFiZXQgPSAoKSA9PiBBcnJheS5hcHBseSh1bmRlZmluZWQsIEFycmF5KDI2KSkubWFwKGZ1bmN0aW9uKHgseSkgeyByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh5ICsgNjUpOyB9KTtcbiAgXG4gIGZ1bmN0aW9uIEFscGhhYmV0KCkge1xuICAgIGNvbnN0IGFscGhhYmV0ID0gY3JlYXRlQWxwaGFiZXQoKVxuICBcbiAgICBjb25zdCBoYW5kZUNsaWNrID0gKHZhbCkgPT4ge1xuICAgICAgc2V0TGV0dGVyKHZhbClcbiAgICB9XG4gICAgY29uc3QgYWxwaGFiZXRGaWx0ZXIgPSBfLm1hcChhbHBoYWJldCwgKGNoYXIpID0+IHtcbiAgICAgIHJldHVybiAoIFxuICAgICAgICAgIDxsaSBjbGFzc05hbWU9J2FscGhhJyBrZXk9e2NoYXJ9IG9uQ2xpY2s9eygpID0+IGhhbmRlQ2xpY2soY2hhcil9PiB7Y2hhcn0gXG4gICAgICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgICAgIC5hbHBoYSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lO1xuICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgICAgfVxuICBcbiAgICAgICAgICAgIGB9XG4gICAgICAgICAgICA8L3N0eWxlPlxuICAgICAgICAgIDwvbGk+XG4gICAgICApXG4gICAgfSlcbiAgICByZXR1cm4gYWxwaGFiZXRGaWx0ZXJcbiAgfVxuXG4gIGNvbnN0IEZpbHRlckNhdGVnb3J5ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgaGFuZGVDbGljayA9ICh2YWwpID0+IHtcbiAgICAgIHNldENhdGVnb3J5KHZhbClcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gaGFuZGVDbGljaygnamFja2V0cycpfT5qYWNrZXRzPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gaGFuZGVDbGljaygnc2hpcnRzJyl9PnNoaXJ0czwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IGhhbmRlQ2xpY2soJ2FjY2Vzc29yaWVzJyl9PmFjY2Vzc29yaWVzPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cblxuICBjb25zdCByZXRyaWV2ZUF2YWlsYWJpbGl0eUluZm9ybWF0aW9uID0gKHZhbCkgPT4ge1xuICAgIGlmICghbWFudWZhY3R1cmVyc1t2YWwubWFudWZhY3R1cmVyXSkgcmV0dXJuIG51bGxcbiAgICAgY29uc29sZS5sb2cobWFudWZhY3R1cmVyc1t2YWwubWFudWZhY3R1cmVyXSlcbiAgICAgICAgY29uc29sZS5sb2cobWFudWZhY3R1cmVyc1t2YWwubWFudWZhY3R1cmVyXVt2YWwuaWQudG9VcHBlckNhc2UoKV0pXG4gIH1cblxuICAvLyBUT01PUlJPVzogTUFQIFRIRSBNQU5VRkFDVFVSRVIgT0JKRUNUIEdVWkFNQVpVTkdBIFNPIFRIQVQgSU4gVEhFIFJFTkRFUiBNRVRIT0QgT0YgTElTVE9GUFJPRFVDVFxuICAvLyBUSEUgQVZBSUxBQklMSVRZIENBTiBCRSBTSU1QTFkgQUNDRVNTRUQgVEhST1VHSCBUSEUgS0VZIFZBTFVFIFBBSVJJTkcsIEUuRy5cbiAgLy8gT0JKW0lEXVxuXG5cbiAgICBcbiBcbiAgXG4gIGNvbnN0IGxpc3RPZlByb2R1Y3RzID0gKGRhdGEpID0+IHtcbiAgICBjb25zdCBsaXN0ID0gXy5tYXAoZGF0YVtsZXR0ZXJdLmNoaWxkcmVuLCAodmFsKSA9PiB7XG4gICAgICBjb25zdCBoYW5kbGVDbGljayA9ICh2YWwpID0+IHtcbiAgICAgICAgYWN0aXZlSWQgPT0gdmFsLmlkID8gc2V0QWN0aXZlSWQobnVsbCkgOiBzZXRBY3RpdmVJZCh2YWwuaWQpXG4gICAgICB9XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8bGkgY2xhc3NOYW1lPXthY3RpdmVJZD09dmFsLmlkID8gJ2xpc3QtZWxlbWVudC1hY3RpdmUnIDogJ2xpc3QtZWxlbWVudCd9IGtleT17dmFsLmlkfSBvbkNsaWNrPXsgKCk9PmhhbmRsZUNsaWNrKHZhbCkgfT57dmFsLm5hbWV9XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXthY3RpdmVJZD09dmFsLmlkID8gJ2luZm8tYWN0aXZlJyA6ICdpbmZvJ30+XG4gICAgICAgICAgPHVsPlxuICAgICAgICAgIDxsaSBrZXk9e3ZhbC5pZCArIDF9PiBpZDoge3ZhbC5pZH08L2xpPlxuICAgICAgICAgIDxsaSBrZXk9e3ZhbC5pZCArIDJ9PiB0eXBlOiB7dmFsLnR5cGV9PC9saT5cbiAgICAgICAgICA8bGkga2V5PXt2YWwuaWQgKyAzfT5wcmljZToge3ZhbC5wcmljZX08L2xpPlxuICAgICAgICAgIDxsaSBrZXk9e3ZhbC5pZCArIDR9Pm1hbnVmYWN0dXJlcjoge3ZhbC5tYW51ZmFjdHVyZXJ9PC9saT5cbiAgICAgICAgICA8bGkga2V5PXt2YWwuaWQgKyA1fT5hdmFpbGFiaWxpdHk6IHshKG1hbnVmYWN0dXJlcnNbdmFsLm1hbnVmYWN0dXJlcl0pID8gJ2xvYWRpbmcnIDogbWFudWZhY3R1cmVyc1t2YWwubWFudWZhY3R1cmVyXVt2YWwuaWQudG9VcHBlckNhc2UoKV0gKyAnIGQnfTwvbGk+XG4gICAgICAgICAgPGxpIGtleT17dmFsLmlkICsgNn0+Y29sb3JzOiB7Xy5tYXAodmFsLmNvbG9yLCBjb2xvciA9PiA8c3BhbiBrZXk9e3ZhbC5pZCArIGNvbG9yfT57Y29sb3J9IDwvc3Bhbj4pIH0gPC9saT5cbiAgICAgICAgICA8L3VsPlxuIFxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgICAgICAubGlzdC1lbGVtZW50IHtcbiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLmxpc3QtZWxlbWVudC1hY3RpdmUge1xuICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC5pbmZvIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgICB9XG4gIFxuICAgICAgICAgICAgYH1cbiAgICAgICAgICA8L3N0eWxlPlxuICAgICAgICA8L2xpPlxuICAgICAgKVxuICAgIH0pXG4gICAgcmV0dXJuIChcbiAgICAgIDx1bD5cbiAgICAgICAge2xpc3R9XG4gICAgICA8L3VsPlxuICAgIClcbiAgfVxuXG5cbiAgY29uc3QgUmVuZGVyZWQgPSAoKSA9PiB7XG4gICAgbGV0IHggPSBudWxsXG4gICAgaWYgKCBjYXRlZ29yeSA9PSAnamFja2V0cycgKSB4ID0gamFja2V0c1xuICAgIGlmICggY2F0ZWdvcnkgPT0gJ3NoaXJ0cycgKSB4ID0gc2hpcnRzXG4gICAgaWYgKCBjYXRlZ29yeSA9PSAnYWNjZXNzb3JpZXMnICkgeCA9IGFjY2Vzc29yaWVzXG5cbiAgICBpZiAoIXgpIHJldHVybiA8ZGl2PmxvYWRpbmc8L2Rpdj5cbiAgICByZXR1cm4gPGRpdj57bGlzdE9mUHJvZHVjdHMoeCl9PC9kaXY+XG4gIH1cblxuXG5cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICA8SGVhZD5cbiAgICAgICAgPHRpdGxlPkNyZWF0ZSBOZXh0IEFwcDwvdGl0bGU+XG4gICAgICAgIDxsaW5rIHJlbD1cImljb25cIiBocmVmPVwiL2Zhdmljb24uaWNvXCIgLz5cbiAgICAgIDwvSGVhZD5cblxuXG4gICAgICA8bWFpbj5cbiAgICAgIDxkaXY+XG4gICAgICAgIGN1cnJlbnQgbGV0dGVyOiB7bGV0dGVyfVxuICAgICAgICA8dWwgY2xhc3NOYW1lPSdhbHBoYWJldCc+XG4gICAgICAgIDxBbHBoYWJldC8+XG4gICAgICAgIDwvdWw+XG4gICAgICA8RmlsdGVyQ2F0ZWdvcnkgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPFJlbmRlcmVkIC8+XG4gICAgICA8L21haW4+XG5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLmNvbnRhaW5lciB7XG4gICAgICAgICAgbWluLWhlaWdodDogMTAwdmg7XG4gICAgICAgICAgcGFkZGluZzogMCAwLjVyZW07XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cblxuICAgICAgICBtYWluIHtcbiAgICAgICAgICBwYWRkaW5nOiA1cmVtIDA7XG4gICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgfVxuXG5cblxuICAgICAgICBmb290ZXIge1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGhlaWdodDogMTAwcHg7XG4gICAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlYWVhZWE7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9vdGVyIGltZyB7XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IDAuNXJlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvb3RlciBhIHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cblxuICAgICAgICBhIHtcbiAgICAgICAgICBjb2xvcjogaW5oZXJpdDtcbiAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICAudGl0bGUgYSB7XG4gICAgICAgICAgY29sb3I6ICMwMDcwZjM7XG4gICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICB9XG5cbiAgICAgICAgLnRpdGxlIGE6aG92ZXIsXG4gICAgICAgIC50aXRsZSBhOmZvY3VzLFxuICAgICAgICAudGl0bGUgYTphY3RpdmUge1xuICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICAgICAgICB9XG5cbiAgICAgICAgLnRpdGxlIHtcbiAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDEuMTU7XG4gICAgICAgICAgZm9udC1zaXplOiA0cmVtO1xuICAgICAgICB9XG5cbiAgICAgICAgLnRpdGxlLFxuICAgICAgICAuZGVzY3JpcHRpb24ge1xuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIC5kZXNjcmlwdGlvbiB7XG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgICAgICAgICBmb250LXNpemU6IDEuNXJlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvZGUge1xuICAgICAgICAgIGJhY2tncm91bmQ6ICNmYWZhZmE7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgICAgIHBhZGRpbmc6IDAuNzVyZW07XG4gICAgICAgICAgZm9udC1zaXplOiAxLjFyZW07XG4gICAgICAgICAgZm9udC1mYW1pbHk6IE1lbmxvLCBNb25hY28sIEx1Y2lkYSBDb25zb2xlLCBMaWJlcmF0aW9uIE1vbm8sXG4gICAgICAgICAgICBEZWphVnUgU2FucyBNb25vLCBCaXRzdHJlYW0gVmVyYSBTYW5zIE1vbm8sIENvdXJpZXIgTmV3LCBtb25vc3BhY2U7XG4gICAgICAgIH1cblxuICAgICAgICAuZ3JpZCB7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGZsZXgtd3JhcDogd3JhcDtcblxuICAgICAgICAgIG1heC13aWR0aDogODAwcHg7XG4gICAgICAgICAgbWFyZ2luLXRvcDogM3JlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5jYXJkIHtcbiAgICAgICAgICBtYXJnaW46IDFyZW07XG4gICAgICAgICAgZmxleC1iYXNpczogNDUlO1xuICAgICAgICAgIHBhZGRpbmc6IDEuNXJlbTtcbiAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgICAgIGNvbG9yOiBpbmhlcml0O1xuICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZWFlYWVhO1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgICAgICAgdHJhbnNpdGlvbjogY29sb3IgMC4xNXMgZWFzZSwgYm9yZGVyLWNvbG9yIDAuMTVzIGVhc2U7XG4gICAgICAgIH1cblxuICAgICAgICAuY2FyZDpob3ZlcixcbiAgICAgICAgLmNhcmQ6Zm9jdXMsXG4gICAgICAgIC5jYXJkOmFjdGl2ZSB7XG4gICAgICAgICAgY29sb3I6ICMwMDcwZjM7XG4gICAgICAgICAgYm9yZGVyLWNvbG9yOiAjMDA3MGYzO1xuICAgICAgICB9XG5cbiAgICAgICAgLmNhcmQgaDMge1xuICAgICAgICAgIG1hcmdpbjogMCAwIDFyZW0gMDtcbiAgICAgICAgICBmb250LXNpemU6IDEuNXJlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5jYXJkIHAge1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICBmb250LXNpemU6IDEuMjVyZW07XG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5sb2dvIHtcbiAgICAgICAgICBoZWlnaHQ6IDFlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgICAgIC5ncmlkIHtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGB9PC9zdHlsZT5cblxuICAgICAgPHN0eWxlIGpzeCBnbG9iYWw+e2BcbiAgICAgICAgaHRtbCxcbiAgICAgICAgYm9keSB7XG4gICAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgU2Vnb2UgVUksIFJvYm90byxcbiAgICAgICAgICAgIE94eWdlbiwgVWJ1bnR1LCBDYW50YXJlbGwsIEZpcmEgU2FucywgRHJvaWQgU2FucywgSGVsdmV0aWNhIE5ldWUsXG4gICAgICAgICAgICBzYW5zLXNlcmlmO1xuICAgICAgICB9XG5cbiAgICAgICAgKiB7XG4gICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgfVxuICAgICAgYH08L3N0eWxlPlxuICAgIDwvZGl2PlxuICApXG59XG4iXX0= */\\n/*@ sourceURL=/Users/aleksioconnor/Documents/projects/reaktor/pages/index.js */\"), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a, {\n    id: \"3379920139\",\n    __self: this\n  }, \"html,body{padding:0;margin:0;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto, Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue, sans-serif;}*{box-sizing:border-box;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/Users/aleksioconnor/Documents/projects/reaktor/pages/index.js */\"));\n}\n\n_s(Home, \"bGGBi/n/dfka2eATYF09gixJ45E=\", false, function () {\n  return [swr__WEBPACK_IMPORTED_MODULE_4__[\"default\"], swr__WEBPACK_IMPORTED_MODULE_4__[\"default\"], swr__WEBPACK_IMPORTED_MODULE_4__[\"default\"], swr__WEBPACK_IMPORTED_MODULE_4__[\"default\"]];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/index.js\n");

/***/ })

})